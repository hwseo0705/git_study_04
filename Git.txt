* 버전관리 with Git

0. 사용자 정보 등록 (한 컴퓨터당 한번)

	$ git config --global user.email "julieseo0705@gmail.com"
	$ git config --global user.name "hwseo0705"

1. 로컬저장소 (my computer) - create a project folder

2. Go to the project folder (cd) and initialize git (once per project, starting version 관리)

	$ git init

3. Add the files for version 관리

	$ git add <filename>
	$ git add .  ## git add all

4. Commit this version

	$ git commit -m "commit message"

5. create a remote repository in Github, press '+' and 'new repository'

6. sync remote and local repositories 

	$ git remote add origin https://~~~

7. upload local to remote

	$ git push origin master

------------------------------------------------------------------------------------------------------------------------------------

* other git commands

	$ git clone https://~  ## only when the directory is empty
	$ git pull origin master
	$ git remote -v
	$ git status
	$ git diff
	$ git 
	$ git log --oneline / git log
 	$ git tag <version number> <commit number> --> adds a tag to that commit
  	$ git log --stat
  	$ git log -p
	$ git log --oneline --all --graph   ## i think it shows everything including branches

------------------------------------------------------------------------------------------------------------------------------------

* git checkout

	$ git checkout master
	$ git checkout <branch number/name>
	$ git log --oneline --all   ## can check the master log, and HEAD will be in current branch
	$ git checkout <tag name>

------------------------------------------------------------------------------------------------------------------------------------

* git reset

	$ git reset --soft/--hard <commit number>   ## soft reset leaves the new files, hard reset deletes all
	$ git reset --hard <deleted commit number>   ## restores deleted commit

    - the already pushed ones are not going to be deleted from the log, data is gone but logs stays
    - the unpushed ones are going to be removed
    - ex) if tenth commit pushed, head on twelvth commit, reset to third commit
	the head will be on the third commit, the data will be restored to third, but log till tenth stays
	eleventh and twelvth unpushed commits will be gone

------------------------------------------------------------------------------------------------------------------------------------

* git branch   ## when you don't want to mess with the master branch you branch out

	$ git branch   ## check branch
	$ git branch <branch name>   ## creating a new branch
	$ git checkout <branch name>   ## Head now on that branch

    - ex) julie creates her own branch, adds julie.txt and team.txt, and commits
	haewon also creates her own branch, adds haewon.txt and team.txt, and commits
	They both have their own branches and committed, but does not affect master yet
	
* git merge   ## merge branches to master 

	$ git merge <branch name>
	$ git branch -d <branch name>   ## delete branch

    - ex) when you merge julie and haewon to master, team.txt conflicts
	then you check team.txt, then select the one you want to merge
	then you commit  --> commit merge
	





